import org.eclipse.smarthome.model.script.ScriptServiceUtil

val toMood= [ Number dimmerValue |
    if (dimmerValue <= 0) {
        return 0
	} else if (dimmerValue <= 25) {
        return 1
	} else if (dimmerValue <= 50) {
        return 2	
	} else if (dimmerValue <= 75) {
        return 3
	} else 	{
        return 4
	}
]

val toDimmer= [ Number moodValue |
    if (moodValue <= 0) {
        return 0
	} else if (moodValue <= 1) {
        return 25
	} else if (moodValue <= 2) {
        return 50	
	} else if (moodValue <= 3) {
        return 75
	} else 	{
        return 100
	}
]

var Boolean lockD = false
var Boolean itmsLockD = false
var Boolean moodLockD = false


rule "Translate Dimmers to Mood - Group"
when 
	Member of gMoodDimmersh changed
then
	if (!(triggeringItem instanceof GroupItem)) {
		return
	}
	logInfo("22", triggeringItem.state.toString)
	if(!lockD) {
		lockD = true
		val moodItemName = triggeringItem.name + "_Mood"
		val value = triggeringItem.getStateAs(PercentType)
		val moodValue = toMood.apply(value)
		try {
			val moodItem = ScriptServiceUtil.getItemRegistry.getItem(moodItemName)
			moodItem.postUpdate(moodValue)
		} catch (ItemNotFoundException ex) {
  			logInfo("22", moodItemName + " not found")
	  	} finally {
			lockD = false
		}
	}
end

rule "Translate Dimmers to Mood - Items"
when 
	Member of gMoodDimmersh changed
then
	if (!(triggeringItem instanceof ColorItem)) {
		return
	}
	if(!itmsLockD) {
		itmsLockD = true
		val moodItemName = triggeringItem.name + "_Mood"
		val value = triggeringItem.getStateAs(PercentType)
		val moodValue = toMood.apply(value)
		try {
			val moodItem = ScriptServiceUtil.getItemRegistry.getItem(moodItemName)
			moodItem.postUpdate(moodValue)
		} catch (ItemNotFoundException ex) {
  			logInfo("22", moodItemName + " not found")
	  	} finally {
			itmsLockD = false
		}
	}
end

rule "Translate Mood To Dimmers Value - Group"
when
	Member of gMoodh received command
then
	if (!(triggeringItem instanceof NumberItem)) {
		return
	}
	if(!moodLockD) {
		moodLockD = true
		val percentValue = toDimmer.apply(receivedCommand as DecimalType)

		val dimmerItemName = triggeringItem.name.replace("_Mood", "")
		logInfo("(2)", percentValue.toString + " " + dimmerItemName)

		try {
			val dimmerItem = ScriptServiceUtil.getItemRegistry.getItem(dimmerItemName)
			dimmerItem.sendCommand(percentValue)
		} catch (ItemNotFoundException ex) {
  			logInfo("22", dimmerItemName + " not found")
	  	} finally {
			moodLockD = false
		}
	}
end