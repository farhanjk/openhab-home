import org.eclipse.smarthome.model.script.ScriptServiceUtil
import java.util.concurrent.locks.ReentrantLock

val toMood= [ Number dimmerValue |
    if (dimmerValue <= 0) {
        return 0
	} else if (dimmerValue <= 25) {
        return 1
	} else if (dimmerValue <= 50) {
        return 2	
	} else if (dimmerValue <= 75) {
        return 3
	} else 	{
        return 4
	}
]

val fromMood= [ Number moodValue, bright |
	var Number localBright
	
	if (!(bright instanceof Number)) {
		localBright = 100
	} else {
		localBright = bright
	}

    switch moodValue
		{
			case 0:
				if (localBright > 0) {
					return 0
				}
			case 1:
				if (localBright <= 0 || localBright > 25) {
					return 25
				}
			case 2:
				if (localBright <= 25 || localBright > 50) {
					return 50
				}
			case 3:  
				if (localBright <= 50 || localBright > 75) {
					return 75
				}
			case 4:
				if (localBright <= 75) {
					return 100
				}
			default:
				return 25
		}
	return localBright
]

val ReentrantLock lockMood  = new ReentrantLock()

rule "Translate Dimmers to Mood"
when 
	Member of gMoodDimmers changed
then
	// logInfo("TranslateToMood", triggeringItem.name + ": " + triggeringItem.state + ": " + triggeringItem.type) 
	
	var bright = 0
	if (triggeringItem instanceof GroupItem) {
		bright = triggeringItem.state
	} else {
	 	bright = (triggeringItem.state as HSBType).brightness
	}

    val moodValue = toMood.apply(bright)
	val moodItemName = triggeringItem.name + "_Mood"
	// logInfo("Mood", triggeringItem.name + ": " + bright + ": " + moodValue + ": " + moodItemName)

	try {
		val moodItem = ScriptServiceUtil.getItemRegistry.getItem(moodItemName)
		if (moodItem.state != moodValue) {
			moodItem.postUpdate(moodValue) 
			// logInfo("Mood", moodItemName + " set to value " + moodValue)
		} else {
			// logInfo("Mood", moodItemName + " was already at value " + moodValue)
		}
	} catch(ItemNotFoundException ex) {
		logInfo("Mood", moodItemName + " not found")
	}
end

rule "Translate Mood To Dimmers Value"
when
	Member of gMood changed
then
	lockMood.lock()
 	val dimmerName = triggeringItem.name.replace("_Mood", "")
 	try {
 		val dimmerItem = ScriptServiceUtil.getItemRegistry.getItem(dimmerName)
		var bright = 0
		if (dimmerItem.state instanceof HSBType) {
			bright = (dimmerItem.state as HSBType).brightness
		} else {
			bright = dimmerItem.state
		}
		logError("Dimmer", dimmerItem.name + " is " + bright) 
 	 	val dimmerValue = fromMood.apply(triggeringItem.state, bright)
 		dimmerItem.sendCommand(dimmerValue) 
		// logInfo("Dimmer", dimmerItem.name + " set to value " + dimmerValue) 
 	} catch(ItemNotFoundException ex) {
 		logInfo("Dimmer", moodItemName + " not found")
 	} finally {
		 lockMood.unlock()
	 }
end
